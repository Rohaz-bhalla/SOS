//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  status            UserStatus         @default(VERIFIED)
  /// @password
  /// @omit
  password          String?
  dateCreated       DateTime           @default(now())
  dateUpdated       DateTime           @default(now()) @updatedAt()
  accounts          Account[]
  sessions          Session[]
  roles             Role[]
  sessionDatas      SessionData[]      @relation("user")
  locations         Location[]         @relation("user")
  sosAlerts         SosAlert[]         @relation("user")
  emergencyContacts EmergencyContact[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model SessionData {
  id           String   @id() @default(uuid())
  sessionToken String
  expiryDate   String
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Location {
  id          String     @id() @default(uuid())
  latitude    Float
  longitude   Float
  timestamp   String
  userId      String?
  user        User?      @relation(fields: [userId], references: [id], name: "user")
  sosAlerts   SosAlert[] @relation("location")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SosAlert {
  id              String         @id() @default(uuid())
  alertTime       String
  userId          String?
  user            User?          @relation(fields: [userId], references: [id], name: "user")
  locationId      String?
  location        Location?      @relation(fields: [locationId], references: [id], name: "location")
  policeStationId String?
  policeStation   PoliceStation? @relation(fields: [policeStationId], references: [id], name: "policeStation")
  dateCreated     DateTime       @default(now())
  dateUpdated     DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PoliceStation {
  id          String     @id() @default(uuid())
  name        String
  latitude    Float
  longitude   Float
  sosAlerts   SosAlert[] @relation("policeStation")
  officers    Officer[]  @relation("policeStation")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Officer {
  id              String         @id() @default(uuid())
  name            String
  rank            String
  contactNo       String
  email           String?
  policeStationId String?
  policeStation   PoliceStation? @relation(fields: [policeStationId], references: [id], name: "policeStation")
  dateCreated     DateTime       @default(now())
  dateUpdated     DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EmergencyContact {
  id          String   @id() @default(uuid())
  name        String
  relation    String
  contactNo   String
  email       String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}
